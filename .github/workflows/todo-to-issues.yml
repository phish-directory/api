name: TODO to Issues

on:
  push:
    branches: [main, master]
  workflow_dispatch: # Allows manual triggering

jobs:
  todo-to-issues:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Fetch all history for all branches and tags

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install dependencies
        run: npm install --save-dev @types/node typescript ts-node crypto

      - name: Create TODO Issues
        id: create-todos
        run: |
          # Create a script to parse TODOs and create issues
          cat > todo-to-issues.ts << 'EOL'
          import * as fs from 'fs';
          import * as path from 'path';
          import * as crypto from 'crypto';
          import { execSync } from 'child_process';

          interface TodoItem {
            file: string;
            line: number;
            content: string;
            assignee?: string;
            details: string;
            context?: string;
            hash: string;
          }

          // Get all TypeScript files
          function getTypeScriptFiles(dir: string, fileList: string[] = []): string[] {
            const files = fs.readdirSync(dir);

            files.forEach(file => {
              const filePath = path.join(dir, file);
              if (fs.statSync(filePath).isDirectory()) {
                if (!file.startsWith('node_modules') && !file.startsWith('.git')) {
                  fileList = getTypeScriptFiles(filePath, fileList);
                }
              } else if (file.endsWith('.ts') || file.endsWith('.tsx')) {
                fileList.push(filePath);
              }
            });

            return fileList;
          }

          // Parse TODO comments
          function parseTodoComments(filePath: string): TodoItem[] {
            const content = fs.readFileSync(filePath, 'utf8');
            const lines = content.split('\n');
            const todos: TodoItem[] = [];

            const todoRegex = /\/\/\s*TODO\s*\((@[\w]+)\)\s*~\s*(.*)/i;

            lines.forEach((line, index) => {
              const match = line.match(todoRegex);
              if (match) {
                const assignee = match[1]; // Extract username with @
                const details = match[2].trim();

                // Get code context (5 lines before and after)
                const contextStart = Math.max(0, index - 5);
                const contextEnd = Math.min(lines.length - 1, index + 5);
                const codeContext = lines.slice(contextStart, contextEnd + 1).join('\n');

                // Create a hash for this TODO
                const hash = crypto.createHash('md5')
                  .update(`${filePath}:${index + 1}:${line.trim()}`)
                  .digest('hex')
                  .substring(0, 8);

                todos.push({
                  file: filePath,
                  line: index + 1,
                  content: line.trim(),
                  assignee: assignee,
                  details: details,
                  context: codeContext,
                  hash: hash
                });
              }
            });

            return todos;
          }

          // Check if an issue already exists for this TODO
          function issueExists(hash: string): boolean {
            try {
              // Search for open issues with the specific hash label
              const cmd = `gh issue list --label "todo-hash-${hash}" --json number`;
              const result = execSync(cmd, { encoding: 'utf8' });
              const issues = JSON.parse(result);

              return issues.length > 0;
            } catch (error) {
              console.error(`Error checking for existing issue: ${error}`);
              return false;
            }
          }

          // Create GitHub issue
          function createGitHubIssue(todo: TodoItem): void {
            // Skip if issue already exists
            if (issueExists(todo.hash)) {
              console.log(`Skipping existing issue for: ${todo.details} (${todo.hash})`);
              return;
            }

            const title = `${todo.details}`;
            const body = `
          ## TODO Item
          - **File:** \`${todo.file}\`
          - **Line:** ${todo.line}
          - **Assignee:** ${todo.assignee}
          - **Hash:** ${todo.hash}

          ## Details
          ${todo.details}

          ## Code Context
          \`\`\`typescript
          ${todo.context}
          \`\`\`

          ## Original Comment
          \`\`\`typescript
          ${todo.content}
          \`\`\`

          *This issue was automatically generated from a TODO comment in the code.*
          `;

            // Convert assignee from @username to just username
            const assignee = todo.assignee ? todo.assignee.substring(1) : '';

            // Create an issue with a special hash label for tracking
            const issueCmd = `gh issue create --title "${title}" --body "${body.replace(/"/g, '\\"')}"${assignee ? ` --assignee "${assignee}"` : ''} --label "todo,todo-hash-${todo.hash}"`;

            try {
              execSync(issueCmd, { encoding: 'utf8' });
              console.log(`Created issue: ${title} (${todo.hash})`);
            } catch (error) {
              console.error(`Failed to create issue for: ${title}`);
              console.error(error);
            }
          }

          // Main execution
          try {
            const files = getTypeScriptFiles('.');
            let totalTodos = 0;
            let newIssues = 0;

            files.forEach(file => {
              const todos = parseTodoComments(file);
              todos.forEach(todo => {
                totalTodos++;
                createGitHubIssue(todo);
                newIssues++;
              });
            });

            console.log(`Processed ${files.length} files, found ${totalTodos} TODOs.`);
          } catch (error) {
            console.error('Error processing TODOs:', error);
            process.exit(1);
          }
          EOL

          # First make sure the custom labels exist
          gh label create --force todo --description "Task from TODO comment" --color "ff8c00"

          # Run the script
          npx ts-node todo-to-issues.ts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        run: echo "TODO to Issues process completed"
