// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountType {
  user
  bot
  admin
}

// make sure to update this in src/types/enums.ts
enum DomainType {
  unknown
  discord
  slack
  instagram
  twitter
  facebook
  other
}

model User {
  id          Int         @id @unique @default(autoincrement())
  uuid        String      @unique @default(uuid())
  name        String
  email       String      @unique
  accountType AccountType @default(user)
  dateCreated DateTime    @default(now())
  dateUpdated DateTime    @updatedAt
  deleted     Boolean     @default(false)
  dateDeleted DateTime?
  // domainsReported Domain[]
}

model Domain {
  id                            Int                             @id @unique @default(autoincrement())
  uuid                          String                          @unique @default(uuid())
  type                          DomainType                      @default(unknown)
  domain                        String
  // reportedBy                    User[]
  dateCreated                   DateTime                        @default(now())
  dateUpdated                   DateTime                        @updatedAt
  WalshyAPIResponse             WalshyAPIResponse[]
  IpQualityScoreAPIResponse     IpQualityScoreAPIResponse[]
  GoogleSafeBrowsingAPIResponse GoogleSafeBrowsingAPIResponse[]
  PhishermanAPIResponse         PhishermanAPIResponse[]
  SinkingYachtsAPIResponse      SinkingYachtsAPIResponse[]
  VirusTotalAPIResponse         VirusTotalAPIResponse[]
  // User                          User?                           @relation(fields: [userId], references: [id])
  // userId                        Int?
}

model GoogleSafeBrowsingAPIResponse {
  id        Int      @id @default(autoincrement())
  domainId  Int
  domain    Domain   @relation(fields: [domainId], references: [id])
  data      Json? // Store the raw JSON response from GoogleSafeBrowsing
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IpQualityScoreAPIResponse {
  id          Int      @id @default(autoincrement())
  domainId    Int
  domain      Domain   @relation(fields: [domainId], references: [id])
  proxy       Boolean
  countryCode String
  data        Json // Store the raw JSON response from IpQualityScore
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PhishermanAPIResponse {
  id             Int      @id @default(autoincrement())
  domainId       Int
  domain         Domain   @relation(fields: [domainId], references: [id])
  classification String
  verifiedPhish  Boolean
  data           Json // Store the raw JSON response from Phisherman
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SinkingYachtsAPIResponse {
  id        Int      @id @default(autoincrement())
  domainId  Int
  domain    Domain   @relation(fields: [domainId], references: [id])
  status    Boolean
  data      Json // Store the raw JSON response from SinkingYachts
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VirusTotalAPIResponse {
  id         Int      @id @default(autoincrement())
  domainId   Int
  domain     Domain   @relation(fields: [domainId], references: [id])
  malicious  Boolean
  suspicious Boolean
  data       Json // Store the raw JSON response from VirusTotal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model WalshyAPIResponse {
  id        Int      @id @default(autoincrement())
  domainId  Int
  domain    Domain   @relation(fields: [domainId], references: [id])
  badDomain Boolean
  data      Json // Store the raw JSON response from Walshy
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
