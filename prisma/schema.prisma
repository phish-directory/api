// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["tracing"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Permissions {
  basic
  trusted
  admin
}

enum Classifications {
  postal
  banking
  item_scams
  other
}

model User {
  id                Int              @id @unique @default(autoincrement())
  uuid              String           @unique @default(uuid())
  name              String
  email             String           @unique
  password          String
  permission        Permissions      @default(basic)
  stripeCustomerId  String?          @unique
  subscriptionItems String[]         @default([])
  deleted           Boolean          @default(false)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  deletedAt         DateTime?
  domainsReported   Domain[]
  expressRequests   ExpressRequest[]
  classifications   Classification[]
}

model Domain {
  id                            Int                             @id @unique @default(autoincrement())
  uuid                          String                          @unique @default(uuid())
  domain                        String
  malicious                     Boolean                         @default(false)
  reportedBy                    User[]
  captures                      Capture[]
  classifications               Classification[]
  createdAt                     DateTime                        @default(now())
  updatedAt                     DateTime                        @updatedAt
  lastChecked                   DateTime?
  WalshyAPIResponse             WalshyAPIResponse[]
  IpQualityScoreAPIResponse     IpQualityScoreAPIResponse[]
  GoogleSafeBrowsingAPIResponse GoogleSafeBrowsingAPIResponse[]
  PhishermanAPIResponse         PhishermanAPIResponse[]
  SinkingYachtsAPIResponse      SinkingYachtsAPIResponse[]
  VirusTotalAPIResponse         VirusTotalAPIResponse[]
  PhishObserverAPIResponse      PhishObserverAPIResponse[]
  UrlScanAPIResponse            UrlScanAPIResponse[]
  SecurityTrailsAPIResponse     SecurityTrailsAPIResponse[]
  PhishReportAPIResponse        PhishReportAPIResponse[]
}

model ExpressRequest {
  id        Int      @id @default(autoincrement())
  method    String
  url       String
  headers   Json?
  body      Json?
  query     Json?
  ip        String
  userAgent String   @default("")
  xIdentity String   @default("")
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Capture {
  id        Int      @id @default(autoincrement())
  domain    Domain?  @relation(fields: [domainId], references: [id])
  domainId  Int?
  binary    Bytes
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Classification {
  id             Int             @id @default(autoincrement())
  classification Classifications
  domain         Domain          @relation(fields: [domainId], references: [id])
  classifier     User            @relation(fields: [userId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  domainId       Int
  userId         Int
}

model GoogleSafeBrowsingAPIResponse {
  id        Int      @id @default(autoincrement())
  domainId  Int
  domain    Domain   @relation(fields: [domainId], references: [id])
  data      Json? // Store the raw JSON response from GoogleSafeBrowsing
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IpQualityScoreAPIResponse {
  id          Int      @id @default(autoincrement())
  domainId    Int
  domain      Domain   @relation(fields: [domainId], references: [id])
  proxy       Boolean
  countryCode String
  data        Json // Store the raw JSON response from IpQualityScore
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PhishermanAPIResponse {
  id             Int      @id @default(autoincrement())
  domainId       Int
  domain         Domain   @relation(fields: [domainId], references: [id])
  classification String
  verifiedPhish  Boolean
  data           Json // Store the raw JSON response from Phisherman
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model SinkingYachtsAPIResponse {
  id        Int      @id @default(autoincrement())
  domainId  Int
  domain    Domain   @relation(fields: [domainId], references: [id])
  status    Boolean
  data      Json // Store the raw JSON response from SinkingYachts
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VirusTotalAPIResponse {
  id         Int      @id @default(autoincrement())
  domainId   Int
  domain     Domain   @relation(fields: [domainId], references: [id])
  malicious  Boolean
  suspicious Boolean
  data       Json // Store the raw JSON response from VirusTotal
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model WalshyAPIResponse {
  id        Int      @id @default(autoincrement())
  domainId  Int
  domain    Domain   @relation(fields: [domainId], references: [id])
  badDomain Boolean
  data      Json // Store the raw JSON response from Walshy
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhishObserverAPIResponse {
  id        Int      @id @default(autoincrement())
  data      Json // Store the raw JSON response from PhishObserver
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UrlScanAPIResponse {
  id        Int      @id @default(autoincrement())
  data      Json // Store the raw JSON response from UrlScan
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SecurityTrailsAPIResponse {
  id        Int      @id @default(autoincrement())
  data      Json // Store the raw JSON response from UrlScan
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PhishReportAPIResponse {
  id        Int      @id @default(autoincrement())
  data      Json // Store the raw JSON response from UrlScan
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
